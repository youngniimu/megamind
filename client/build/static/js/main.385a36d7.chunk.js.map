{"version":3,"sources":["actions/types.ts","components/Nav/Route.tsx","actions/darkMode.ts","hooks/useDarkMode.ts","components/Common/ToggleSwitch/ToggleSwitch.tsx","components/Nav/Link.tsx","components/Common/Modal/Modal.tsx","components/Forms/SignupForm.tsx","components/Landing/Landing.tsx","components/Common/Modal/useModal.ts","components/SinglePlayer/SinglePlayerLobby.tsx","components/SinglePlayer/SinglePlayerGame.tsx","components/Multiplayer/MultiPlayerLobby.tsx","components/App.tsx","reducers/index.ts","reducers/darkModeReducer.ts","index.tsx"],"names":["ActionTypes","Route","props","useState","window","location","pathname","currentPath","setCurrentPath","useEffect","onLocationChange","addEventListener","removeEventListener","path","children","useDarkMode","darkMode","useSelector","state","dispatch","useDispatch","document","getElementsByTagName","setAttribute","toggle","type","ToggleDarkMode","ToggleSwitch","name","style","className","onChange","Link","href","onClick","event","preventDefault","history","pushState","navEvent","PopStateEvent","dispatchEvent","Modal","isShowing","hide","ReactDOM","createPortal","aria-modal","aria-hidden","tabIndex","role","data-dismiss","aria-label","body","SignupForm","onSubmit","placeholder","Landing","setIsShowing","useModal","right","SinglePlayerLobby","SinglePlayerGame","MultiPlayerLobby","App","reducers","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","render","getElementById"],"mappings":"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","file":"static/js/main.385a36d7.chunk.js","sourcesContent":["import { ToggleDarkMode } from './darkMode';\n\nexport enum ActionTypes {\n  ToggleDarkMode,\n}\n\nexport type Action = ToggleDarkMode;\n","import { useState, useEffect } from 'react';\n\ninterface AppProps {\n  path: string;\n  children: JSX.Element;\n}\n\nconst _Route = (props: AppProps) => {\n  const [currentPath, setCurrentPath] = useState(window.location.pathname);\n\n  useEffect(() => {\n    const onLocationChange = () => {\n      setCurrentPath(window.location.pathname);\n    };\n\n    window.addEventListener('popstate', onLocationChange);\n\n    return () => {\n      window.removeEventListener('popstate', onLocationChange);\n    };\n  }, []);\n\n  return currentPath === props.path ? props.children : null;\n};\n\nexport const Route = _Route;\n","import { ActionTypes } from './types';\n\nexport interface ToggleDarkMode {\n  type: ActionTypes.ToggleDarkMode;\n}\n\nexport const toggleDarkMode = (): ToggleDarkMode => {\n  return {\n    type: ActionTypes.ToggleDarkMode,\n  };\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { StoreState } from '../reducers';\nimport { toggleDarkMode } from '../actions';\n\nexport const useDarkMode = () => {\n  const { darkMode } = useSelector((state: StoreState) => {\n    return {\n      darkMode: state.darkMode,\n    };\n  });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    document\n      .getElementsByTagName('HTML')[0]\n      .setAttribute('data-theme', darkMode ? 'dark' : 'light');\n  }, [darkMode]);\n\n  const toggle = () => {\n    dispatch(toggleDarkMode());\n  };\n\n  return { toggle, darkMode: darkMode ? 'dark' : 'light' };\n};\n","import React from 'react';\n\nimport './toggleSwitch.scss';\n\nimport { useDarkMode } from '../../../hooks/useDarkMode';\n\ninterface ToggleButtonProps {\n  name: string;\n  style?: {\n    right?: string;\n    left?: string;\n    bottomt?: string;\n    top?: string;\n  };\n}\n\nconst ToggleSwitch = ({ name, style }: ToggleButtonProps): JSX.Element => {\n  const { toggle, darkMode } = useDarkMode();\n\n  // input gives only the on/off feature, no visible difference\n  return (\n    <>\n      <label style={style} className=\"toggle-switch\">\n        <input onChange={toggle} type=\"checkbox\" />\n        <span className=\"slider\"></span>\n        <span className=\"slider-text\"></span>\n      </label>\n    </>\n  );\n};\n\nexport { ToggleSwitch };\n","import React from 'react';\n\ninterface LinkProps {\n  className: string;\n  href: string;\n  children: string;\n}\n\nconst _Link = ({ className, href, children }: LinkProps): JSX.Element => {\n  const onClick = (event: any) => {\n    event.preventDefault();\n    window.history.pushState({}, '', href);\n\n    const navEvent = new PopStateEvent('popstate');\n    window.dispatchEvent(navEvent);\n  };\n\n  return (\n    <a onClick={onClick} className={className} href={href}>\n      {children}\n    </a>\n  );\n};\n\nexport const Link = _Link;\n","import './Modal.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport * from './useModal';\n\ninterface ModalProps {\n  isShowing: boolean;\n  hide(): void;\n  children: JSX.Element;\n}\n\nconst _Modal = ({\n  isShowing,\n  hide,\n  children,\n}: ModalProps): JSX.Element | null =>\n  isShowing\n    ? ReactDOM.createPortal(\n        <>\n          <div className=\"modal-overlay\" />\n          <div\n            className=\"modal-wrapper\"\n            aria-modal\n            aria-hidden\n            tabIndex={-1}\n            role=\"dialog\"\n          >\n            <div className=\"modal\">\n              <button\n                type=\"button\"\n                className=\"modal-close-button\"\n                data-dismiss=\"modal\"\n                aria-label=\"Close\"\n                onClick={hide}\n              >\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n              {children}\n            </div>\n          </div>\n        </>,\n        document.body\n      )\n    : null;\n\nexport const Modal = _Modal;\n","import './forms.scss';\n\nimport React from 'react';\n\nconst _SignupForm = (): JSX.Element => {\n  const onSubmit = (event: any) => {\n    event.preventDefault();\n  };\n  return (\n    <>\n      <div>\n        <h3>Signup for megamind</h3>\n        <form onSubmit={(event) => onSubmit(event)}>\n          <input\n            className=\"form-text-input\"\n            type=\"text\"\n            placeholder=\"Username\"\n          />\n          <input className=\"form-text-input\" type=\"text\" placeholder=\"Email\" />\n          <input\n            className=\"form-text-input\"\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n          <input\n            className=\"form-text-input\"\n            type=\"password\"\n            placeholder=\"Repeat password\"\n          />\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport const SignupForm = _SignupForm;\n","import './landing.scss';\n\nimport React from 'react';\n\nimport { ToggleSwitch } from '../Common/ToggleSwitch/ToggleSwitch';\nimport { Link } from '../Nav/Link';\nimport { Modal, useModal } from '../Common/Modal/Modal';\nimport { SignupForm } from '../Forms/SignupForm';\n\nimport { useDarkMode } from '../../hooks/useDarkMode';\n\nexport const Landing = (): JSX.Element => {\n  const { isShowing, toggle } = useModal();\n  return (\n    <>\n      <ToggleSwitch style={{ right: '10px' }} name=\"darkMode\" />\n      <div className=\"landing-choose-game\">\n        <Link className=\"landing-choose-game-button\" href=\"/singleplayer/lobby\">\n          Single player\n        </Link>\n        <Link className=\"landing-choose-game-button\" href=\"/multiplayer/lobby\">\n          Play Online\n        </Link>\n      </div>\n      <div className=\"landing-footer\">\n        <div className=\"landing-footer-button\">About</div>\n        <div className=\"landing-footer-button\">\n          Add to\n          <br />\n          homescreen\n        </div>\n      </div>\n      <button onClick={toggle}>modal</button>\n      <Modal isShowing={isShowing} hide={toggle}>\n        <SignupForm />\n      </Modal>\n    </>\n  );\n};\n","import { useState } from 'react';\n\nexport const useModal = () => {\n  const [isShowing, setIsShowing] = useState(false);\n\n  function toggle() {\n    setIsShowing(!isShowing);\n  }\n\n  return {\n    isShowing,\n    toggle,\n  };\n};\n","import React from 'react';\n\nconst _SinglePlayerLobby = (): JSX.Element => {\n  return (\n    <div>\n      <div>Round Length</div>\n    </div>\n  );\n};\n\nexport const SinglePlayerLobby = _SinglePlayerLobby;\n","import React from 'react';\n\nconst _SinglePlayerGame = (): JSX.Element => {\n  return <div>SingleplayerGame</div>;\n};\n\nexport const SinglePlayerGame = _SinglePlayerGame;\n","import React from 'react';\n\nconst _MultiPlayerLobby = (): JSX.Element => {\n  return <div>MultiplayerLobby</div>;\n};\n\nexport const MultiPlayerLobby = _MultiPlayerLobby;\n","import './app.css';\n\nimport React from 'react';\n\nimport { Route } from './Nav/Route';\nimport { Landing } from './Landing/Landing';\nimport { SinglePlayerLobby } from './SinglePlayer/SinglePlayerLobby';\nimport { SinglePlayerGame } from './SinglePlayer/SinglePlayerGame';\nimport { MultiPlayerLobby } from './Multiplayer/MultiPlayerLobby';\n\nconst _App = (): JSX.Element => {\n  return (\n    <>\n      <Route path=\"/\">\n        <Landing />\n      </Route>\n      <Route path=\"/singleplayer/lobby\">\n        <SinglePlayerLobby />\n      </Route>\n      <Route path=\"/singleplayer/game\">\n        <SinglePlayerGame />\n      </Route>\n      <Route path=\"/multiplayer/game\">\n        <MultiPlayerLobby />\n      </Route>\n    </>\n  );\n};\n\nexport const App = _App;\n","import { combineReducers } from 'redux';\nimport { darkModeReducer } from './darkModeReducer';\n\nexport interface StoreState {\n  darkMode: boolean;\n}\n\nexport const reducers = combineReducers<StoreState>({\n  darkMode: darkModeReducer,\n});\n","import { ActionTypes, Action } from '../actions';\nimport { StoreState } from './index';\n\nexport const darkModeReducer = (state: boolean = false, action: Action) => {\n  switch (action.type) {\n    case ActionTypes.ToggleDarkMode:\n      return !state;\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore, compose } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport { App } from './components/App';\nimport { reducers } from './reducers';\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}